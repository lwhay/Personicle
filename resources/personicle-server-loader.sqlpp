DROP DATAVERSE Personicle IF EXISTS;

CREATE DATAVERSE Personicle;

USE Personicle;

CREATE TYPE AddressType AS OPEN {
  category: string?,
  address: string,
  city: string,
  state: string,
  postalCode: string
};
CREATE TYPE PhoneDetailType AS OPEN {
  category: string?,
  phone: string
};
CREATE TYPE EmailDetailType AS OPEN {
  category: string?,
  email: string
};
CREATE TYPE UserType AS OPEN {
  userId: string,
  userName: string?,
  dateOfBirth: date?,
  addresses: [AddressType]?,
  phones: [PhoneDetailType]?,
  emails: [EmailDetailType]?
};

CREATE DATASET users(UserType) PRIMARY KEY userId;

USE Personicle;

DROP DATASET FoodLog IF EXISTS;

DROP TYPE FoodLogType IF EXISTS;

CREATE TYPE FoodLogType AS OPEN {
  logId: uuid,
  userId: string,
  timestamp: bigint,
  userName: string?,
  foodname: string,
  weight: double,
  total_calories: double,
  latitude: double,
  longitude: double,
  preference_star: int,
  comments: string
};

CREATE DATASET FoodLog(FoodLogType) PRIMARY KEY logId AUTOGENERATED;

use Personicle;
create index FoodUserIdIdx on FoodLog(userId) type btree;
create index UserNameIdx on users(userName) type btree;

DROP DATASET Food IF EXISTS;

DROP TYPE FoodType IF EXISTS;

CREATE TYPE FoodType AS OPEN {
  foodname: string, --primary key
  calories: double,
  carbohydrate: double,
  fat: double,
  protein: double
};

CREATE DATASET Food(FoodType) PRIMARY KEY foodname;

use Personicle;
load dataset users using localfs
(("path"="127.0.0.1://./pseudo_users.adm"),("format"="adm"));

use Personicle;
load dataset Food using localfs
(("path"="127.0.0.1://./food.adm"),("format"="adm"));

use Personicle;
load dataset FoodLog using localfs
(("path"="127.0.0.1://./foodlog.adm"),("format"="adm"));

use Personicle;
create index FoodNameLogIdx on FoodLog(foodname) type btree;
