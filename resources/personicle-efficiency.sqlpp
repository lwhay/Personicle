DROP DATAVERSE Personicle IF EXISTS;

CREATE DATAVERSE Personicle;

USE Personicle;

CREATE TYPE AddressType AS OPEN {
  category: string?,
  address: string,
  city: string,
  state: string,
  postalCode: string
};
CREATE TYPE PhoneDetailType AS OPEN {
  category: string?,
  phone: string
};
CREATE TYPE EmailDetailType AS OPEN {
  category: string?,
  email: string
};
CREATE TYPE UserType AS OPEN {
  userId: string,
  userName: string?,
  dateOfBirth: date?,
  addresses: [AddressType]?,
  phones: [PhoneDetailType]?,
  emails: [EmailDetailType]?
};

CREATE DATASET users(UserType) PRIMARY KEY userId;

USE Personicle;

DROP DATASET FoodLog IF EXISTS;

DROP TYPE FoodLogType IF EXISTS;

CREATE TYPE FoodLogType AS OPEN {
  logId: uuid,
  userId: string,
  timestamp: bigint,
  userName: string?,
  foodname: string,
  weight: double,
  total_calories: double,
  latitude: double,
  longitude: double,
  preference_star: int,
  comments: string
};

CREATE DATASET FoodLog(FoodLogType) PRIMARY KEY logId AUTOGENERATED;

use Personicle;
create index FoodUserIdIdx on FoodLog(userId) type btree;
create index UserNameIdx on users(userName) type btree;

DROP DATASET Food IF EXISTS;

DROP TYPE FoodType IF EXISTS;

CREATE TYPE FoodType AS OPEN {
  foodname: string, --primary key
  calories: double,
  carbohydrate: double,
  fat: double,
  protein: double
};

CREATE DATASET Food(FoodType) PRIMARY KEY foodname;

use Personicle;
load dataset users using localfs
(("path"="127.0.0.1:///usr/Working/Personicle/pseudo_users.adm"),("format"="adm"));

use Personicle;
load dataset Food using localfs
(("path"="127.0.0.1:///usr/Working/Personicle/food.adm"),("format"="adm"));

use Personicle;
load dataset FoodLog using localfs
(("path"="127.0.0.1:///usr/Working/Personicle/xaa,127.0.0.1:///usr/Working/Personicle/xab,127.0.0.1:///usr/Working/Personicle/xac,127.0.0.1:///usr/Working/Personicle/xad,127.0.0.1:///usr/Working/Personicle/xae,127.0.0.1:///usr/Working/Personicle/xaf,127.0.0.1:///usr/Working/Personicle/xag,127.0.0.1:///usr/Working/Personicle/xah,127.0.0.1:///usr/Working/Personicle/xai,127.0.0.1:///usr/Working/Personicle/xaj"),("format"="adm"));

use Personicle;
create index FoodNameLogIdx on FoodLog(foodname) type btree;

use Personicle;
select fl.preference_star as fstar, count(*) as fcnt
from Food f,  FoodLog fl
where f.foodname = "糖醋里脊"
and f.foodname /*+ indexnl */ = fl.foodname
group by fl.preference_star
order by fcnt desc;

use Personicle;
select f.foodname as fname, count(*) as fcnt
from users u,  FoodLog f
where u.userName = "匡书鹏"
and u.userId /*+ indexnl */ = f.userId
group by f.foodname
order by fcnt desc;

use Personicle;
select f.foodname as fname, sum(fd.calories * f.weight) as fcnt
from users u,  FoodLog f, Food fd
where u.userName = "匡书鹏"
and u.userId /*+ indexnl */ = f.userId
and f.foodname = fd.foodname
group by f.foodname
order by fcnt desc;

--The followings are bad quereis

use Personicle;
select f.foodname as fname, sum(fd.calories * f.weight) as fcnt
from FoodLog f, users u,  Food fd
where u.userName = "匡书鹏"
and u.userId /*+ indexnl */ = f.userId
and f.foodname = fd.foodname
group by f.foodname
order by fcnt desc;

use Personicle;
select f.foodname as foodname from  FoodLog as f, users as u
where u.userName = "匡书鹏" and u.userId /*+ indexnl */ = f.userId;
